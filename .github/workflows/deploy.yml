name: Deploy

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI - Code Quality & Unit Tests", "E2E Tests"]
    types:
      - completed
    branches: [ main ]

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    environment: staging
    
    strategy:
      matrix:
        node-version: ['22.x']

    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd client && npm ci
          cd ../server && npm ci --force

      - name: 🏗️ Build applications
        run: |
          cd client && npm run build
          cd ../server && npm run build

      - name: 🐳 Build Docker image
        run: |
          docker build -t ng-demo:${{ github.sha }} .
          docker tag ng-demo:${{ github.sha }} ng-demo:latest

      - name: 🧪 Test Docker image
        run: |
          # Start the container in background for testing
          docker run -d --name test-container \
            -p 3000:3000 \
            -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
            -e NODE_ENV="production" \
            -e KEYCLOAK_CLIENT_SECRET="test-secret" \
            ng-demo:${{ github.sha }}
          
          # Wait a moment for startup
          sleep 10
          
          # Basic health check
          curl -f http://localhost:3000/health || exit 1
          
          # Cleanup
          docker stop test-container
          docker rm test-container

      - name: 📦 Save Docker image
        run: |
          docker save ng-demo:${{ github.sha }} | gzip > ng-demo-${{ github.sha }}.tar.gz

      - name: 📤 Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ github.sha }}
          path: ng-demo-${{ github.sha }}.tar.gz
          retention-days: 7

      # Placeholder for actual deployment steps
      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Docker image: ng-demo:${{ github.sha }}"
          echo "This is where you would deploy to your staging environment"
          # Example deployment commands:
          # kubectl set image deployment/ng-demo ng-demo=ng-demo:${{ github.sha }}
          # docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ github.sha }}

      - name: 📦 Load Docker image
        run: |
          docker load < ng-demo-${{ github.sha }}.tar.gz
          docker tag ng-demo:${{ github.sha }} ng-demo:production

      # Placeholder for production deployment
      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Docker image: ng-demo:${{ github.sha }}"
          echo "This is where you would deploy to your production environment"
          # Example production deployment commands:
          # kubectl set image deployment/ng-demo ng-demo=ng-demo:${{ github.sha }} --namespace=production
          # docker-compose -f docker-compose.prod.yml up -d

      - name: 🏷️ Create release tag
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$(date +'%Y.%m.%d')-${{ github.run_number }}" -m "Production deployment $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin --tags 